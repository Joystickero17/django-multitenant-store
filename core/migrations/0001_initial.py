# Generated by Django 4.1.5 on 2023-01-21 02:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Correo electronico del usuario', max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, help_text='Nombres del Usuario', max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, help_text='Apellidos del Usuario', max_length=255, null=True)),
                ('about', models.TextField(blank=True, help_text='Breve descripcion acerca del usuario', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Booleano para saber si la cuenta esta activada y operativa')),
                ('is_staff', models.BooleanField(default=False, help_text='Booleano para saber si pertenece a los administradores')),
                ('role', models.CharField(choices=[('website_owner', 'Dueño del sitio Web'), ('base_user', 'Usuario Sin rol'), ('store_owner', 'Dueño de Tienda'), ('store_operator', 'Operador de tienda'), ('freelance', 'Freelance'), ('customer', 'Cliente'), ('random_role', 'Rol de Prueba'), ('base_user', 'Usuario sin rol')], default='base_user', help_text='Literal para identificar uso de roles', max_length=255)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='fecha de ingreso al sistema')),
                ('born_date', models.DateField(help_text='Fecha de nacimiento del usuario', null=True)),
                ('phone_number', models.CharField(help_text='Numero de telefono del usuario', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_coordinates', models.CharField(help_text='Coordenadas de Google Maps', max_length=255, null=True)),
                ('is_main', models.BooleanField(default=True, help_text='Indica si la direccion es principal o no')),
                ('region', models.CharField(help_text='Estado o Region de la direccion', max_length=255, null=True)),
                ('subregion', models.CharField(help_text='ciudad de la direccion', max_length=255, null=True)),
                ('city', models.CharField(help_text='Localidad, calle o Avenida de la direccion', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='campo para saber la creacion')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='campo para saber cuando se actualizo la direccion')),
                ('short_address', models.CharField(help_text='Detalles de la direccion actual para fines de posicionamiento a la hora de envio', max_length=500, null=True)),
                ('contact_phone', models.CharField(help_text='Telefono Alternativo de Contacto', max_length=255)),
                ('user', models.ForeignKey(help_text='Usuario que registro esta direccion', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la marca', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion de la marca')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de modificacion de datos')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('sub_total', models.FloatField(default=0, help_text='Subtotal de los productos del carrito')),
                ('total', models.FloatField(default=0, help_text='Total del producto del carrito')),
                ('user', models.OneToOneField(help_text='Usuario a quien pertenece el carrito', on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la categoria', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion de la categoria')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de modificacion del la categoria')),
                ('parent', models.ForeignKey(blank=True, help_text='categoria padre de esta categoria', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category')),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_color', models.CharField(help_text='Color principal con el que se caracteriza la tienda', max_length=100, null=True)),
                ('secondary_color', models.CharField(help_text='Color secundario con el que se caracteriza la tienda', max_length=100, null=True)),
                ('whatsapp_number', models.CharField(help_text='Numero que aparecera en el icono de whatsapp de la tienda', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del archivo', max_length=255)),
                ('file', models.FileField(help_text='Ruta relativa del archivo', upload_to='media/')),
                ('priority', models.SmallIntegerField(default=0, help_text='campo para ordernar los archivos de acuerdo a una prioridad')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de subida del documento')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de modificacion')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_status', models.CharField(choices=[('AWAITING_PAYMENT', 'Esperando por pago del cliente'), ('VALIDATING_PAYMENT', 'validando pago'), ('PAYMENT_FAILED', 'Pago Fallido'), ('PAYMENT_EXPIRED', 'Pago Expirado'), ('PAYMENT_SUCCESS', 'Pago Exitoso')], default='AWAITING_PAYMENT', help_text='Campo para saber el status de la Transaccion', max_length=255)),
                ('external_payment_id', models.CharField(help_text='Las procesadoras de pago generan un id externo cuando se hace una compra, ese id debe guardarse aqui', max_length=255, null=True)),
                ('payment_method', models.CharField(choices=[('paypal', 'Paypal'), ('coinbase', 'Coinbase crypto'), ('pago_movil', 'Pago Movil'), ('free_item', 'Productos Gratuitos'), ('transferencia_nacional', 'Transferencia de bancos Nacionales')], help_text='metodo elegido para el pago', max_length=255)),
                ('receipt', models.FileField(help_text='Campo para hacer referencia a la ubicacion relativa del archivo del recibo de compra', null=True, upload_to='media/')),
                ('delivery_type', models.CharField(choices=[('delivery', 'Delivery o Envio'), ('personally', 'Retiro Personalmente')], default='personally', help_text='Campo para saber como el cliente va a retirar la mercancia', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de la Compra')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de modificacion de la compra')),
                ('total_amount', models.FloatField(default=0, help_text='monto total de la orden de compra')),
                ('aditional_info', models.TextField(blank=True, max_length=1000, null=True)),
                ('address', models.ForeignKey(help_text='Direccion de Envío de la orden', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.address')),
                ('user', models.ForeignKey(help_text='Usuario que creo la orden', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre o título del producto', max_length=255)),
                ('product_slug', models.SlugField(help_text='sufijo unico para encontrar el producto por la URL', null=True, unique=True)),
                ('quantity', models.PositiveBigIntegerField(help_text='Cantidad del producto en inventario')),
                ('description', models.TextField(help_text='Descripcion corta del producto', max_length=800, null=True)),
                ('large_description', models.TextField(help_text='Descripcion larga del producto del producto', max_length=5000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion del producto')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de actualizacion del producto')),
                ('condition', models.CharField(choices=[('NEW', 'Nuevo'), ('USED', 'Usado'), ('REFURBISHED', 'Remanufacturado')], default='NEW', help_text='Condicion del producto', max_length=50)),
                ('price', models.FloatField(help_text='si es null se marcara como gratuito', null=True)),
                ('product_type', models.CharField(choices=[('SERVICE', 'SERVICIOS'), ('MERCHANDISE', 'MERCANCIA')], default='SERVICE', help_text='determina si un bien es un producto o un servicio, solo los servicios pueden llevar price=null', max_length=100)),
                ('discount', models.PositiveSmallIntegerField(default=0, help_text='Porcentaje de descuento de un producto, en caso de que lo tenga.')),
                ('brand', models.ForeignKey(help_text='Marca del producto, si es null se entendera como generica', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.brand')),
                ('category', models.ForeignKey(help_text='Categoria del producto', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='core.category')),
                ('photos', models.ManyToManyField(help_text='Fotos y/o archivos asociados al producto', to='core.media')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(help_text='Producto agregado a la lista de deseos', on_delete=django.db.models.deletion.CASCADE, to='core.products')),
                ('user', models.ForeignKey(help_text='Usuario que agrego este producto a su lista', on_delete=django.db.models.deletion.CASCADE, related_name='wish_list', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la tienda', max_length=255)),
                ('slug', models.SlugField(help_text='sufijo para ubicar la tienda facilmente por URL', max_length=200, unique=True)),
                ('logo', models.ImageField(help_text='imagen que contiene el logotipo de la empresa', null=True, upload_to='uploads/')),
                ('description', models.CharField(help_text='Una breve descripcion de la Empresa', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de ingreso al sistema')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha de actualizacion de la informacion')),
                ('bussiness_legal_id', models.CharField(help_text='Numero de Identificacion Comercial de la empresa, varia dependiendo del pais, EJ: Venezuela, RIF.', max_length=255, null=True, unique=True)),
                ('company_employee_number', models.CharField(choices=[('1-10', 'De uno a Diez'), ('10-50', 'De Diez a Cincuenta'), ('50-250', 'De Cincuenta a Doscientos Cincuenta'), ('>=250', 'Mas de Doscientos Cincuenta')], help_text='Numero estimado de empleados de la Empresa.', max_length=255)),
                ('company_anual_income', models.FloatField(help_text='Ingreso Anual de la empresa Expresado en Dolares, Campo no Obligatorio', null=True)),
                ('category', models.ForeignKey(help_text='Categoria principal a la que se dedica la empresa', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
                ('config', models.OneToOneField(help_text='relacion con confoguracion de la Empresa', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.config')),
                ('parent', models.ForeignKey(help_text='Referencia a una tienda padre que la haya referenciado o en caso de ser franquicia, la empresa matriz', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_store', to='core.store')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Titulo del review', max_length=150, null=True)),
                ('content', models.TextField(help_text='Cuerpo del review', max_length=1000)),
                ('score', models.IntegerField(default=0, help_text='Puntuacion dada por el usuario a la calidad del producto')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion del review')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha en que se actualiza el review')),
                ('product', models.ForeignKey(help_text='Producto al que pertenece el review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.products')),
                ('user', models.ForeignKey(help_text='Usuario que realizo el review', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='products',
            name='store',
            field=models.ForeignKey(help_text='Tienda que publico el producto', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.store'),
        ),
        migrations.AddField(
            model_name='products',
            name='thumbnail',
            field=models.ForeignKey(help_text='Miniatura del producto', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_products', to='core.media'),
        ),
        migrations.CreateModel(
            name='ProductOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(help_text='Orden principal', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_orders', to='core.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_orders', to='core.products')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person_type', models.CharField(choices=[('N', 'Persona Natural'), ('J', 'Persona Juridica, Empresa'), ('G', 'Ente Gubernamental'), ('E', 'Persona Extranjera Legal')], help_text='Tipo de persona para saber si es una empresa o una persona natural', max_length=30)),
                ('document_type', models.CharField(choices=[('CEDULA', 'Cédula de identidad'), ('LICENCIA_CONDUCIR', 'Licencia de Conducir'), ('PASAPORTE', 'Pasaporte'), ('RIF', 'Registro de Información Fiscal')], help_text='Tipo de documento, si es RIF o cedula', max_length=50)),
                ('document_number', models.CharField(help_text='Numero de identificacion del documento', max_length=100, unique=True)),
                ('user', models.OneToOneField(help_text='Usuario al que pertenece la informacion', on_delete=django.db.models.deletion.CASCADE, related_name='info', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=255, unique=True)),
                ('payment_type', models.CharField(choices=[('paypal', 'Paypal'), ('coinbase', 'Coinbase crypto'), ('pago_movil', 'Pago Movil'), ('free_item', 'Productos Gratuitos'), ('transferencia_nacional', 'Transferencia de bancos Nacionales')], max_length=255)),
                ('national_bank', models.CharField(choices=[('0102', 'Banco de Venezuela (BDV)'), ('0104', 'Banco Venezolano de Crédito (BVC)'), ('0105', 'Banco Mercantil'), ('0108', 'Banco Provincial (BBVA)'), ('0114', 'Bancaribe'), ('0115', 'Banco Exterior'), ('0128', 'Banco Caroní'), ('0134', 'Banesco Banco Universal'), ('0137', 'Sofitasa'), ('0138', 'Banco Plaza'), ('0146', 'Bangente'), ('0151', 'Banco Fondo Común (BFC)'), ('0156', '100% Banco'), ('0157', 'Del Sur Banco Universal'), ('0163', 'Banco del Tesoro'), ('0166', 'Banco Agrícola de Venezuela'), ('0168', 'Bancrecer'), ('0169', 'Mi Banco, Banco Microfinanciero C.A'), ('0171', 'Banco Activo'), ('0172', 'Bancamiga'), ('0174', 'Banplus'), ('0175', 'Banco Bicentenario del Pueblo'), ('0177', 'Banco de la Fuerza Armada Nacional Bolivariana (BANFANB)'), ('0191', 'Banco Nacional de Crédito (BNC)')], max_length=255, null=True)),
                ('state', models.CharField(choices=[('review', 'En revisión'), ('verified', 'Verificado')], default='review', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_payments', to='core.order')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='core.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_product_items', to='core.products')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='store',
            field=models.ForeignKey(help_text='tienda a la que pertenece, puede ser nulo en caso de ser cliente o freelance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.store'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='wish',
            constraint=models.UniqueConstraint(fields=('product', 'user'), name='unique product per user'),
        ),
        migrations.AddConstraint(
            model_name='productorder',
            constraint=models.UniqueConstraint(models.F('order'), models.F('product'), name='unique_product_order', violation_error_message='No pueden haber mas de 2 ordenes de producto por orden principal'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.UniqueConstraint(models.F('cart'), models.F('product'), name='unique_cart_product_item', violation_error_message='No pueden haber mas de 2 ordenes de producto por carrito'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_main', True)), fields=('user',), name='unique_main_address_user'),
        ),
    ]
